== Pseudo Code
What follows is the current pseudo code for my simple 6502 assembler.  It is a work in progress!


{{{
// Constants
const uint16_t expectedHiMem = 0x9600;      // DOS should be located above this address.
const uint16_t dosBufferSize = 1024;        // ProDOS keeps 1k of buffers just above HIMEM.
const uint16_t machineCodeReserve = 0x7600; // Start of the area to be reserved for our machine code and ProDOS buffers.
const int16_t  testQueueStart = machineCodeReserve + dosBufferSize;      // Use 1 page of reserve for test queue.
const int16_t  testQueueSize = 256;
const int16_t  testQueueEnd = testQueueStart + testQueueSize - 1;
const uint16_t machineCodeStart = testQueueStart + testQueueSize;   // Assembled program will start at this address.
const int16_t  opcodeCount = 14;            // The opcode table supports 14 addressing modes.
const int16_t  maxLabelCount = 256;         // The maximum number of labels to support.
const uint16_t equInvalid = 0x10000;
const int16_t  immediate = 0;
const int16_t  absolute = 1;
const int16_t  zeropage = 2;
const int16_t  implied = 3;
const int16_t  zeropageIndexedIndirect = 4;
const int16_t  indirectIndexed = 5;
const int16_t  zeropageIndexedX = 6;
const int16_t  zeropageIndexedY = 7;
const int16_t  absoluteIndexedX = 8;
const int16_t  absoluteIndexedY = 9;
const int16_t  relative = 10;
const int16_t  absoluteIndirect = 11;
const int16_t  absoluteIndexedIndirect = 12;
const int16_t  zeropageIndirect = 13;

// Globals
uint16_t programCounter;
uint16_t lineProgramCounter;
uint16_t equValue;

int16_t  listFlag;
int16_t  testFlag;
int16_t  operatorCount;
int16_t  lineLength;
int16_t  length;
int16_t  pass;
int16_t  found;
int16_t  expressionValue;
int16_t  dataLineLo;
int16_t  dataLineHi;
int16_t  dataPtrLo;
int16_t  dataPtrHi;
int16_t  sourceDataLineLo;
int16_t  sourceDataLineHi;
int16_t  sourceDataPtrLo;
int16_t  sourceDataPtrHi;
int16_t  labelIndex;
int16_t  symbolIndex;
int16_t  symbolCount;
int16_t  testQueueWrite;
int16_t  testQueueRead;
int16_t  testQueueCount;
int16_t  errorCount;
int16_t  openParen;
int16_t  closeParen;
int16_t  comma;
int16_t  emitByte;
int16_t  i;
int16_t  j;
int16_t  tempInt;
int16_t  retInt;

string   D$;
string   lineText;
string   label;
string   operator;
string   operand;
string   comments;
string   symbolName;
string   expression;
string   tempString;

int16_t  opcodes[];
uint16_t symbolValues[];
string   symbolNames[];
string   operatorNames[];
int16_t  opcodePointers[];
int16_t  opcodeLines[];


main()
{
    CLEAR   // Tell BASIC to discard all variables.
    init();
    openSource();
    PRINT "ASSEMBLY STARTED"
    pass = 1;
    runPass();
    rewindSource();
    pass = 2;
    runPass();
    verifyTestQueueEmpty();
    closeSource();
    printSummary();
    cleanup();
}

init()
{
    SPEED=255 // Make listing output as fast as possible.
    TEXT      // Make sure that we are in text mode.
    HOME      // Clear the screen.
    reserveMemoryForMachineCode();
    countOpcodeTableEntries();
    populateOpcodeTable();
    initVariables();
    saveSourceDataLocations();
}

reserveMemoryForMachineCode()
{
    // Check that HIMEM is where we expect it.
    programCounter = PEEK(0x74) << 8) | PEEK(0x73);
    if (programCounter == machineCodeReserve)
        return;
    if (programCounter != expectedHiMem)
    {
        PRINT "*HIMEM"
        STOP
    }
    
    // Make sure that BASIC program hasn't already overflowed into our machine code area.
    if (PEEK(0x6E) << 8) | PEEK(0x6D) >= machineCodeReserve)
    {
        PRINT "*NORAM"
        STOP
    }
    
    HIMEM: machineCodeReserve;
}

// Example DATA statements for instruction opcode table.
// The first column is the mnemonic for the instruction.
// The rest of the columns are opcode value for the different addressing modes.
// The column order matches the table in the Apple IIe Technical Reference Manual.
// A value of 255 means that this addressing mode isn't supported for this instruction.
// If there is just a 0 in the immediate column, then this is a directive.
DATA "ADC", 105, 109, 101, 255, 97, 113, 117, 255, 125, 121, 255, 255, 255, 114
DATA "ASC", 0
DATA "DB", 0
DATA "DS", 0
DATA "DW", 0
DATA "EQU", 0
DATA "LST", 0
DATA "TST", 0
DATA "" // Terminates the table.

// Example source code
DATA "LABEL BRA LABEL"
DATA "      SAV TEST.BIN"
DATA "      END"

countOpcodeTableEntries()
{
    operatorCount = -1;
    for (;;)
    {
        READ tempString
        if (tempString == "")
            break;
        operatorCount++;

        READ tempInt
        if (tempInt > 0)
            skipOpcodeData();
    }
}

skipOpcodeData()
{
    for (j = 1 ; j < opcodeCount ; j++)
        READ tempInt
}

populateOpcodeTable()
{
    DIM operatorNames[operatorCount]
    DIM opcodeLines[operatorCount]
    DIM opcodePointers[operatorCount]
    
    RESTORE
    k = 0;
    for (i = 0 ; i <= operatorCount ; i++)
    {
        READ operatorNames[i];
        
        getCurrentDataLocations();
        READ tempInt
        if (tempInt == 0)
        {
            opcodeLines[i] = k;
            k++;
        }
        else
        {
            opcodeLines[i] = dataLineHi * 256 + dataLineLo;
            opcodePointers[i] = dataPtrHi * 256 + dataPtrLo;
            skipOpcodeData();
        }
    }
    // Skip over table terminator.
    READ tempString
}

getCurrentDataLocations()
{
    dataLineLo = PEEK(0x7B);
    dataLineHi = PEEK(0x7C);
    dataPtrLo = PEEK(0x7D);
    dataPtrHi = PEEK(0x7E);
}

initVariables()
{
    // Initialize integers.
    listFlag = 1;
    testFlag = 0;
    operatorCount = 0;
    directiveCount = 0;
    symbolCount = 0;
    errorCount = 0;
    testQueueWrite = testQueueStart;
    testQueueRead = testQueueStart;
    testQueueCount = 0;

    // Initialize strings.
    D$ = CHRS(4);
    
    // Init array.
    DIM opcodes(opcodeCount-1)
    DIM symbolNames(maxLabelCount-1)
    DIM symbolValues(maxLabelCount-1)
}

saveSourceDataLocations()
{
    getCurrentDataLocations();
    sourceDataLineLo = dataLineLo;
    sourceDataLineHi = dataLineHi;
    sourceDataPtrLo = dataPtrLo;
    sourceDataPtrHi = dataPtrHi;
}

openSource()
{
    // Nothing to be done here as DATA pointer is already set and ready to read assembly source.
}

runPass()
{
    programCounter = machineCodeStart;
    for (;;)
    {
        fetchAndSplitNextLine();
        parseLine();
        if (operator == "END")
            return;
    }
}

fetchAndSplitNextLine()
{
    freeUnneededStrings();
    
    restoreDataLocations();
    READ lineText
    getCurrentDataLocations();
    
    lineLength = LEN(lineText);
    lineProgramCounter = programCounter;
    equValue = equInvalid;
    
    i = 1;
    extractNextField();
    if (retInt)
        return;
    label = tempString;
        
    extractNextField();
    if (retInt)
        return;
    operator = tempString;

    extractNextField();
    if (retInt)
        return;
    operand = tempString;

    extractNextField();
    if (!retInt && pass == 2)
    {
        printLineNumber();
        PRINT "EXTRA_INPUT"
    }
}

freeUnneededStrings()
{
    tempString = "";
    lineText = "";
    label = "";
    opcode = "";
    operand = "";
    comment = "";
    symbolName = "";
    expression = "";
    PRINT D$;"FRE(0)" // Free unused strings.
}

restoreDataLocations()
{
    POKE 0x7B, dataLineLo
    POKE 0x7C, dataLineHi
    POKE 0x7D, dataPtrLo
    POKE 0x7E, dataPtrHi
}

extractNextField()
{
    // Just return if we have already extracted all of the fields already.
    if (i == lineLength+1)
    {
        retInt = 1;
        return;
    }
    
    // Check for comment.
    tempString = MID$(lineText, i, 1);
    if (tempString == ";")
    {
        comment = MID$(lineText, i);
        retInt = 1;
        return;
    }

    // Find end of this field.
    if (tempString == "'")
    {
        // Extract delimited string.
        findEndOfString();
        j++;
    }
    else
    {
        // Extract whitespace delimited field.
        findNextWhitespace();
    }
    tempString = MID$(lineText, i, j-i);
    i = j;
    
    // Advance to start of next field.
    findNextNonWhitespace();
    i = j;
    
    retInt = 0;
    return;
}

findEndOfString()
{
    j = i+1;
    while (j <= lineLength)
    {
        if (MID$(lineText,j,1) == "'")
            return;
        j++;
    }
}

findNextWhitespace()
{
    j = i;
    while (j <= lineLength)
    {
        if (MID$(lineText,j,1) == " ")
            return;
        j++;
    }
}

findNextNonWhitespace()
{
    j = i;
    while (j <= lineLength)
    {
        if (MID$(lineText,j,1) != " ")
            return;
        j++;
    }
}

printLineNumber()
{
    errorCount++;
    PRINT "LINE:"; dataLineHi*256 + dataLineLo ; " *";
}

parseLine()
{
    if (testFlag && pass==2)
        parseCommentForTestBytes();
    createLabelSymbolIfNeeded();

    matchOperator();
    if (found == 1)
        parseAddressAndEmitMachineCode();
    else if (found == 2)
        parseAsDirective();
    else if (found == 0 && operator != "END" && pass == 2)
    {
        printLineNumber();
        PRINT "INVALID_OPCODE"
    }
    if (listFlag && pass==2)
        generateListOutput();
}

parseCommentForTestBytes()
{
    doesCommentContainTestData();
    if (!retInt)
        return;
    queueUpTestBytes();
}

doesCommentContainTestData()
{
    for (i = 2 ; i <= LEN(comments) ; i++)
    {
        tempString = MID$(comments, i, 1)
        if (tempString != " " && (tempString < "0" || tempString > "9") && (tempString < "A" || tempString > "F"))
        {
            retInt = 0;
            return;
        }
    }
    retInt = 1;
}

queueUpTestBytes()
{
    i = 2;
    while (i < LEN(comments))
    {
        skipSpaces();
        expression = MID$(comments, i, 2);
        k = 1;
        parseHexValue();
        queueTestByte();
        i += 2;
    }
}

skipSpaces()
{
    while (i < LEN(comments))
    {
        if (MID$(comments, i, 1) != " ")
            return;
        i++;
    }
}

queueTestByte()
{
    if (testQueueCount == testQueueSize)
    {
        printLineNumber();
        PRINT "TST_OVER"
        STOP
    }
    
    POKE testQueueWrite,expressionValue
    testQueueWrite++;
    if (testQueueWrite > testQueueEnd)
        testQueueWrite = testQueueStart;
    testQueueCount++;
}

createLabelSymbolIfNeeded()
{
    labelIndex = -1;
    if (label == "" || pass == 2)
        return;
        
    symbolName = label;
    findSymbol();
    if (symbolIndex != -1)
    {
        printLineNumber();
        PRINT "DUP_LABEL"
        return;
    }

    allocateSymbol();
    if (symbolIndex == -1)
    {
        printLineNumber();
        PRINT "TOO_MANY_LABELS"
        STOP
    }
    
    labelIndex = symbolIndex;
    symbolNames[labelIndex] = label;
    symbolValues[labelIndex] = programCounter;
}

findSymbol()
{
    for (k = 0 ; k < symbolCount ; k++)
    {
        if (symbolNames[k] == symbolName)
        {
            symbolIndex = k;
            return;
        }
    }
    symbolIndex = -1;
}

allocateSymbol()
{
    if (symbolCount >= maxLabelCount)
    {
        symbolIndex = -1;
        return;
    }
    symbolIndex = symbolCount;
    symbolCount++;
}

matchOperator()
{
    if (operator == "")
    {
        found = 4;
        return;
    }
    
    j = 0;
    k = operatorCount;
    while (j <= k)
    {
        i = (j+k)/2;
        if (operator < operatorNames[i])
            k = i - 1;
        else if (operator > operatorNames[i])
            j = i + 1;
        else if (operatorNames[i] == operator)
        {
            if (opcodeLines[i] < 1000)
            {
                i = opcodeLines[i];
                found = 2;
                return;
            }

            tempInt = INT(opcodeLines[i] / 256);
            POKE 0x7C, tempInt
            POKE 0x7B, opcodeLines[i] - tempInt * 256
            tempInt = INT(opcodePointers[i] / 256);
            POKE 0x7E, tempInt
            POKE 0x7D, opcodePointers[i] - tempInt * 256;

            for (j = 0 ; j < opcodeCount ; j++)
                READ opcodes[j]
            found = 1;
            return;
        }
    }
    found = 0;
}

parseAddressAndEmitMachineCode()
{
    length = LEN(operand);
    findParensAndComma();

    if (operand == "")
    {
        handleImplied();
        return;
    }
    if (operand[0] == '#')
    {
        handleImmediate();
        return;
    }
    
    if (isAbsoluteOrZeropage())
        handleAbsoluteOrZeropage();
    else if (isAbsoluteOrZeropageIndexed())
        handleAbsoluteOrZeropageIndexed();
    else if (isAbsoluteOrZeropageIndexedIndirect())
        handleAbsoluteOrZeropageIndexedIndirect();
    else if (isIndirectIndexed())
        handleIndirectIndexed();
    else if (isAbsoluteOrZeropageIndirect())
        handleAbsoluteOrZeropageIndirect();
    else
    {
        signalInvalidAddressMode();
        return;
    }
}

findParensAndComma()
{
    openParen = -1;
    closeParen = -1;
    comma = -1;

    if (length == 0)
        return;
    
    for (i = 1 ; i <= length ; i++)
    {
        tempString = MID$(operand,i,1)
        if (tempString == "(")
            openParen = i;
        else if (tempString == ")")
            closeParen = i;
        else if (tempString == ",")
            comma = i;
    }
}

handleImplied()
{
    if (opcodes[implied] == 255)
    {
        signalInvalidAddressMode();
        return;
    }
    
    emitByte = opcodes[implied];
    emitMachineCode();
}

signalInvalidAddressMode()
{
    if (pass == 1)
        return;
    printLineNumber();
    PRINT "BAD_ADDR"
}

emitMachineCode()
{
    if (pass == 2 && emitByte != PEEK(programCounter))
    {
        printLineNumber();
        PRINT "PHASE"
        STOP
    }
    emit1Byte();
}

emit1Byte()
{
    // Can use the 1K above original HIMEM as well since ProDOS will use the lower 1K of our reservation instead.
    if (programCounter >= expectedHiMem + 1024)
    {
        printLineNumber();
        PRINT "OOM"
        STOP
    }
    
    POKE programCounter, emitByte
    programCounter++;
    
    if (testFlag && pass == 2)
        checkTestByte();
}

checkTestByte()
{
    dequeueTestByte();
    if (tempInt != emitByte)
        signalTestFailure();
}

dequeueTestByte()
{
    if (testQueueCount == 0)
    {
        printLineNumber();
        PRINT "TST_UNDER"
        STOP
    }
    
    tempInt = PEEK(testQueueRead)
    testQueueRead++;
    if (testQueueRead > testQueueEnd)
        testQueueRead = testQueueStart;
    testQueueCount--;
}

signalTestFailure()
{
    printLineNumber();
    PRINT "TST_FAIL"
    STOP
}

handleImmediate()
{
    if (length < 2)
    {
        signalExpressionError();
        return;
    }
    
    testString = MID$(operand,2,1)
    if (testString == "<")
    {
        expression = MID$(operand, 3);
        parseExpression();
        expressionValue |= 0xFF;
    }
    else (testString == ">")
    {
        expression = MID$(operand, 3);
        parseExpression();
        expressionValue >>= 8;
    }
    else
    {
        expression = MID$(operand, 2);
        parseExpression();
    }
    
    if (opcodes[immediate] == 255)
    {
        signalInvalidAddressMode();
        return;
    }
    
    if (expressionValue < 256)
    {
        emitByte = opcodes[immediate];
        emitMachineCode();
    
        emitByte = expressionValue;
        emit1Byte();
        return;
    }
    
    if (pass == 2)
    {
        printLineNumber();
        PRINT "TOO_BIG"
        return;
    }
}

signalExpressionError()
{
    expressionValue = 0;
    if (pass == 2)
    {
        printLineNumber();
        PRINT "BAD_EXPR"
    }
}

parseExpression()
{
    if (expression == "")
    {
        signalExpressionError();
        return;
    }

    tempString = MID$(expression, 1, 1);
    if (tempString == "$")
    {
        k = 2;
        parseHexValue();
    }
    else if (tempString >= "0" && tempString <= "9")
    {
        parseDecValue();
    }
    else
    {
        parseSymbolName();
    }
}

parseHexValue()
{
    length2 = LEN(expression);
    if (length2 - k + 1 < 1)
    {
        signalExpressionError();
        return;
    }
    
    expressionValue = 0;
    for (; k <= length1 ; k++)
    {
        tempInt = ASC(MID$(expression,k,1));
        if (tempInt >= '0' && tempInt <= '9')
        {
            tempInt -= '0';
        }
        else if (tempInt >= 'A' && tempInt <= 'F')
        {
            tempInt = tempInt - 'A' + 10;
        }
        else
        {
            expressionValue = 0;
            if (pass == 2)
            {
                printLineNumber();
                PRINT "BAD_HEX"
            }
            return;
        }
        
        expressionValue = expressionValue * 16 + tempInt;
    }
}

parseDecValue()
{
    expressionValue = VAL(expression);
}

parseSymbolName()
{
    symbolName = expression;
    findSymbol();
    if (symbolIndex != -1)
    {
        expressionValue = symbolValues[symbolIndex];
        return;
    }

    if (pass == 1)
    {
        // Assume that forward references aren't in zero page.
        expressionValue = 256;
    }
    else
    {
        expressionValue = 256;
        printLineNumber();
        PRINT "BAD_LABEL"
    }
}

int isAbsoluteOrZeropage()
{
    return comma = -1 && openParen == -1 && closeParen == -1;
}

handleAbsoluteOrZeropage()
{
    expression = operand;
    parseExpression();

    if (opcodes[relative] == 255)
    {
        i = zeropage;
        j = absolute;
        emitZeropageOrAbsolute();
        return;
    }
    
    // Handle as relative instruction.
    expressionValue = expressionValue - lineProgramCounter - 2;
    emitByte = opcodes[relative];
    emitMachineCode();
    emit8BitExpression();
    return;
    
    if (pass == 2 && (expressionValue < -128 || expressionValue > 127))
    {
        printLineNumber();
        PRINT "TOO_FAR"
    }
}

emitZeropageOrAbsolute()
{
    if (expressionValue <= 255 && opcodes[i] != 255)
    {
        emitByte = opcodes[i];
        emitMachineCode();
        emit8BitExpression();
        return;
    }
    
    if (opcodes[j] != 255)
    {
        emitByte = opcodes[j];
        emitMachineCode();
        emit16BitExpression();
        return;
    }

    signalInvalidAddressMode();
}

emit8BitExpression()
{
    emitByte = expressionValue & 0xFF;
    emit1Byte();
}

emit16BitExpression()
{
    emit8BitExpression();
    emitByte = expressionValue >> 8;
    emit1Byte();
}

int isAbsoluteOrZeropageIndexed()
{
    return comma != -1 && openParen == -1 && closeParen == -1;
}

handleAbsoluteOrZeropageIndexed()
{
    expression = MID$(operand, 1, comma)
    parseExpression();
    tempString = MID$(operand, comma + 1, 1)
    if (tempString == "X")
    {
        i = zeropageIndexedX;
        j = absoluteIndexedX;
        emitZeropageOrAbsolute();
        return;
    }
    else if (tempString == "Y")
    {
        i = zeropageIndexedY;
        j = absoluteIndexedY;
        emitZeropageOrAbsolute();
        return;
    }
    else
    {
        signalInvalidAddressMode();
        return;
    }
}

int isAbsoluteOrZeropageIndexedIndirect()
{
    return comma != -1 && openParen != -1 && closeParen != -1 && 
           openParen < comma && closeParen > comma;
}

handleAbsoluteOrZeropageIndexedIndirect()
{
    expression = MID$(operand, openParen+1, comma-openParen-1)
    parseExpression();
    if (MID$(operand, comma + 1, 1) != "X")
    {
        signalInvalidAddressMode();
        return;
    }

    i = zeropageIndexedIndirect;
    j = absoluteIndexedIndirect;
    emitZeropageOrAbsolute();
}

int isIndirectIndexed()
{
    return comma != -1 && openParen != -1 && closeParen != -1 && 
           closeParen < comma && openParen < closeParen;
}

handleIndirectIndexed()
{
    expression = MID$(operand, openParen+1, closeParen-openParen-1)
    parseExpression();
    if (MID$(operand, comma + 1, 1) != "Y")
    {
        signalInvalidAddressMode();
        return;
    }
    
    if (expressionValue < 256 && opcodes[indirectIndexed] != 255)
    {
        emitByte = opcodes[indirectIndexed];
        emitMachineCode();
        emit8BitExpression();
        return;
    }
    signalInvalidAddressMode();
}

int isAbsoluteOrZeropageIndirect()
{
    return comma == -1 && openParen != -1 && closeParen != -1 && openParen < closeParen;
}

handleAbsoluteOrZeropageIndirect()
{
    expression = MID$(operand, openParen+1, closeParen-openParen-1)
    parseExpression();

    i = zeropageIndirect;
    j = absoluteIndirect;
    emitZeropageOrAbsolute();
}

parseAsDirective()
{
    length = LEN(operand);
    ON i GOSUB handleASC, handleDB, handleDS, handleDW, handleEQU, handleLST, handleSAV, handleTST
}

handleASC()
{
    if (MID$(operand, 1, 1) != "'" || MID$(operand, length, 1) != "'")
    {
        signalBadOperand();
        return;
    }
    for (i = 2 ; i < length ; i++)
    {
        emitByte = ASC(MID$(operand, i, 1));
        emitMachineCode();
    }
}

signalBadOperand()
{
    if (pass == 1)
        return;
    printLineNumber();
    PRINT "BAD_OPERAND"
}

handleDB()
{
    for (i = 1 ; i <= length) ; )
    {
        findNextComma();
        expression = MID$(operand, i, j-i)
        parseExpression();
        emit8BitExpression();
        i = j + 1;
    }
}

findNextComma()
{
    for (j = i ; j < length ; j++)
    {
        if (MID$(operand, j, 1) == ",")
            return;
    }
}

handleDS()
{
    if (operand == "/")
    {
        // Always round up to next page, even if at start of current page.
        expressionValue = ((programCounter + 0x80) & ~0x7F) - programCounter;
    }
    else
    {
        expression = operand;
        parseExpression();
    }
        
    emitByte = 0;
    for (i = 1 ; i <= expressionValue ; i++)
    {
        emitMachineCode();
    }
}

handleDW()
{
    for (i = 1 ; i <= length ; )
    {
        findNextComma();
        expression = MID$(operand, i, j-i)
        parseExpression();
        emit16BitExpression();
        i = j + 1;
    }
}

handleEQU()
{
    expression = operand;
    parseExpression();

    if (pass == 1 && labelIndex == -1)
    {
        printLineNumber();
        PRINT "EQU_NOLABEL"
        return;
    }

    equValue = expressionValue;
    if (pass == 1)
        symbolValues[labelIndex] = expressionValue;
}

handleLST()
{
    if (pass == 1)
        return;

    if (operand == "ON")
        listFlag = 1;
    else if (operand == "OFF")
        listFlag = 0;
    else
        signalBadOperand();
}

handleSAV()
{
    if (operand == "")
    {
        signalBadOperand();
        return;
    }
    if (pass == 2 && errorCount == 0)
        PRINT D$;"BSAVE ";operand;", A";machineCodeStart;", L";programCounter-machineCodeStart
    return;
}

handleTST()
{
    testFlag = 1;
}

generateListOutput()
{
    listLineNumber();
    listAddress();
    if (equValue != equInvalid)
        listEquValueAndSource();
    else
        listMachineCodeAndSource();
    PRINT
}

listLineNumber()
{
    tempString = STR$(dataLineHi*256 + dataLineLo);
    PRINT TAB(6-LEN(tempString));tempString;":";
}

listAddress()
{
    emitByte = lineProgramCounter / 256;
    printHexByte();
    emitByte = lineProgramCounter - (emitByte * 256);
    printHexByte();
}

printHexByte()
{
    tempInt = emitByte / 16;
    printHexNibble();
    tempInt = emitByte - (tempInt * 16);
    printHexNibble();
}

printHexNibble()
{
    if (tempInt < 10)
        PRINT CHR$(ASC("0")+tempInt);
    else
        PRINT CHR$(ASC("A")+tempIn1-10);
}

listEquValueAndSource()
{
    PRINT " =";
    print4DigitHexValue();
    listLineText();
}

print4DigitHexValue()
{
    emitByte = equValue / 256;
    printHexByte();
    emitByte = equValue - (emitByte * 256);
    printHexByte();
}

listMachineCodeAndSource()
{
    for ( i = 0 ; i < programCounter - lineProgramCounter ; i++ )
    {
        if (i == 3)
        {
            lineTextList();
        }
        if (i > 2 && (i / 3) * 3 == i)
        {
            PRINT
        }
    
        HTAB(12 + 3*(i - ((i / 3)*3)))
        emitByte = PEEK(lineProgramCounter+i)
        printHexByte();
    }
    
    if (programCounter - lineProgramCounter <= 3)
    {
        listLineText();
    }
}

listLineText()
{
    PRINT TAB(22);lineText;
}

rewindSource()
{
    dataLineLo = sourceDataLineLo;
    dataLineHi = sourceDataLineHi;
    dataPtrLo = sourceDataPtrLo;
    dataPtrHi = sourceDataPtrHi;
}

verifyTestQueueEmpty()
{
    if (pass == 1 || !testFlag)
        return;
    if (testQueueCount)
        signalTestFailure();
    
}

closeSource()
{
    // Nothing to be done here when using DATA statements.
}

printSummary()
{
    PRINT
    PRINT "ASSEMBLY COMPLETED OF ";programCounter-machineCodeStart;" BYTES"
    PRINT errorCount;" ERROR(S) ENCOUNTERED"
    PRINT
    for (i = 0 ; i < symbolCount ; i++)
    {
        PRINT symbolNames(i);" = ";
        equValue = symbolValues(i);
        print4DigitHexValue();
        PRINT " (";symbolValues(i);")"
}

cleanup()
{
    HIMEM: expectedHiMem;
}


}}}
