1  REM  COPYRIGHT 2013 ADAM GREEN (HTTP://GITHUB.COM/ADAMGREEN)
2  REM  LICENSED UNDER THE APACHE LICENSE, VERSION 2.0
3  REM  SEE APACHE.BAS FOR LICENSE INFO.
4  REM 
5  REM  SIMPLE 6502 SYMBOLIC ASSEMBLER
1000  DATA ADC,105,109,101,255,97,113,117,255,125,121,255,255,255,114
1001  DATA AND,41,45,37,255,33,49,53,255,61,57,255,255,255,50
1002  DATA ASL,255,14,6,10,255,255,22,255,30,255,255,255,255,255
1003  DATA BCC,255,255,255,255,255,255,255,255,255,255,144,255,255,255
1004  DATA BCS,255,255,255,255,255,255,255,255,255,255,176,255,255,255
1005  DATA BEQ,255,255,255,255,255,255,255,255,255,255,240,255,255,255
1006  DATA BIT,137,44,36,255,255,255,52,255,60,255,255,255,255,255
1007  DATA BMI,255,255,255,255,255,255,255,255,255,255,48,255,255,255
1008  DATA BNE,255,255,255,255,255,255,255,255,255,255,208,255,255,255
1009  DATA BPL,255,255,255,255,255,255,255,255,255,255,16,255,255,255
1010  DATA BRA,255,255,255,255,255,255,255,255,255,255,128,255,255,255
1011  DATA BRK,255,255,255,0,255,255,255,255,255,255,255,255,255,255
1012  DATA BVC,255,255,255,255,255,255,255,255,255,255,80,255,255,255
1013  DATA BVS,255,255,255,255,255,255,255,255,255,255,112,255,255,255
1014  DATA CLC,255,255,255,24,255,255,255,255,255,255,255,255,255,255
1015  DATA CLD,255,255,255,216,255,255,255,255,255,255,255,255,255,255
1016  DATA CLI,255,255,255,88,255,255,255,255,255,255,255,255,255,255
1017  DATA CLV,255,255,255,184,255,255,255,255,255,255,255,255,255,255
1018  DATA CMP,201,205,197,255,193,209,213,255,221,217,255,255,255,210
1019  DATA CPX,224,236,228,255,255,255,255,255,255,255,255,255,255,255
1020  DATA CPY,192,204,196,255,255,255,255,255,255,255,255,255,255,255
1021  DATA DEC,255,206,198,58,255,255,214,255,222,255,255,255,255,255
1022  DATA DEX,255,255,255,202,255,255,255,255,255,255,255,255,255,255
1023  DATA DEY,255,255,255,136,255,255,255,255,255,255,255,255,255,255
1024  DATA EOR,73,77,69,255,65,81,85,255,93,89,255,255,255,82
1025  DATA INC,255,238,230,26,255,255,246,255,254,255,255,255,255,255
1026  DATA INX,255,255,255,232,255,255,255,255,255,255,255,255,255,255
1027  DATA INY,255,255,255,200,255,255,255,255,255,255,255,255,255,255
1028  DATA JMP,255,76,255,255,255,255,255,255,255,255,255,108,124,255
1029  DATA JSR,255,32,255,255,255,255,255,255,255,255,255,255,255,255
1030  DATA LDA,169,173,165,255,161,177,181,255,189,185,255,255,255,178
1031  DATA LDX,162,174,166,255,255,255,255,182,255,190,255,255,255,255
1032  DATA LDY,160,172,164,255,255,255,180,255,188,255,255,255,255,255
1033  DATA LSR,255,78,70,74,255,255,86,255,94,255,255,255,255,255
1034  DATA NOP,255,255,255,234,255,255,255,255,255,255,255,255,255,255
1035  DATA ORA,9,13,5,255,1,17,21,255,29,25,255,255,255,18
1036  DATA PHA,255,255,255,72,255,255,255,255,255,255,255,255,255,255
1037  DATA PHP,255,255,255,8,255,255,255,255,255,255,255,255,255,255
1038  DATA PHX,255,255,255,218,255,255,255,255,255,255,255,255,255,255
1039  DATA PHY,255,255,255,90,255,255,255,255,255,255,255,255,255,255
1040  DATA PLA,255,255,255,104,255,255,255,255,255,255,255,255,255,255
1041  DATA PLP,255,255,255,40,255,255,255,255,255,255,255,255,255,255
1042  DATA PLX,255,255,255,250,255,255,255,255,255,255,255,255,255,255
1043  DATA PLY,255,255,255,122,255,255,255,255,255,255,255,255,255,255
1044  DATA ROL,255,46,38,42,255,255,54,255,62,255,255,255,255,255
1045  DATA ROR,255,110,102,106,255,255,118,255,126,255,255,255,255,255
1046  DATA RTI,255,255,255,64,255,255,255,255,255,255,255,255,255,255
1047  DATA RTS,255,255,255,96,255,255,255,255,255,255,255,255,255,255
1048  DATA SBC,233,237,229,255,225,241,245,255,253,249,255,255,255,242
1049  DATA SEC,255,255,255,56,255,255,255,255,255,255,255,255,255,255
1050  DATA SED,255,255,255,248,255,255,255,255,255,255,255,255,255,255
1051  DATA SEI,255,255,255,120,255,255,255,255,255,255,255,255,255,255
1052  DATA STA,255,141,133,255,129,145,149,255,157,153,255,255,255,146
1053  DATA STX,255,142,134,255,255,255,255,150,255,255,255,255,255,255
1054  DATA STY,255,140,132,255,255,255,148,255,255,255,255,255,255,255
1055  DATA STZ,255,156,100,255,255,255,116,255,158,255,255,255,255,255
1056  DATA TAX,255,255,255,170,255,255,255,255,255,255,255,255,255,255
1057  DATA TAY,255,255,255,168,255,255,255,255,255,255,255,255,255,255
1058  DATA TRB,255,28,20,255,255,255,255,255,255,255,255,255,255,255
1059  DATA TSB,255,12,4,255,255,255,255,255,255,255,255,255,255,255
1060  DATA TSX,255,255,255,186,255,255,255,255,255,255,255,255,255,255
1061  DATA TXA,255,255,255,138,255,255,255,255,255,255,255,255,255,255
1062  DATA TXS,255,255,255,154,255,255,255,255,255,255,255,255,255,255
1063  DATA TYA,255,255,255,152,255,255,255,255,255,255,255,255,255,255
1099  DATA  ""
1200  DATA ASC,DB,DS,DW,EQU,LST,SAV,TST
1299  DATA  ""
2000  CLEAR : GOSUB 2100: GOSUB 2800: PRINT "ASSEMBLY STARTED":P% = 1: GOSUB 2900: GOSUB 9600:P% = 2: GOSUB 2900: GOSUB 9900: GOSUB 9700: GOSUB 10100: GOSUB 9800: END 
2100  SPEED= 255: TEXT : PRINT : PRINT  CHR$(4);"PR#3": HOME : GOSUB 2200: GOSUB 2300: GOSUB 2400: GOSUB 2600: RETURN 
2200 P =  PEEK(116) *256 + PEEK(115): IF P = 30208  THEN  RETURN 
2210  IF P < >38400  THEN  PRINT "*HIMEM": STOP 
2220  IF  PEEK(110) *256 + PEEK(109) > = 30208  THEN  PRINT "*NORAM": STOP 
2230  HIMEM: 30208: RETURN 
2300 LF% = 1:TF% = 0:IC% = 0:DC% = 0:SC% = 0:EC% = 0:TW% = 31232:TR% = 31232:TC% = 0
2310 D$ =  CHR$(4)
2320  DIM O%(13): DIM SN$(255): DIM SV(255)
2330  RETURN 
2400  READ T$: IF T$ = ""  THEN 2420
2410 IC% = IC% +1: GOSUB 2500: GOTO 2400
2420  READ T$: IF T$ = ""  THEN  RETURN 
2430 DC% = DC% +1: GOTO 2420
2500  FOR K = 1 TO 14: READ T%: NEXT : RETURN 
2600  GOSUB 2700:S1% = D1%:S2% = D2%:S3% = D3%:S4% = D4%: RETURN 
2700 D1% =  PEEK(123):D2% =  PEEK(124):D3% =  PEEK(125):D4% =  PEEK(126): RETURN 
2800  RETURN 
2900 P = 31488
2910  GOSUB 3000: GOSUB 3700: IF O$ = "END"  THEN  RETURN 
2920  GOTO 2910
3000  GOSUB 3100: GOSUB 3200: READ A$: GOSUB 2700:A% =  LEN(A$):A = P:Q = 65536:I = 1: GOSUB 3300: IF R%  THEN  RETURN 
3010 L$ = T$: GOSUB 3300: IF R%  THEN  RETURN 
3020 O$ = T$: GOSUB 3300: IF R%  THEN  RETURN 
3030 P$ = T$: GOSUB 3300: IF   NOT R%  AND P% = 2  THEN  GOSUB 3600: PRINT "EXTRA_INPUT"
3040  RETURN 
3100 T$ = "":A$ = "":L$ = "":O$ = "":P$ = "":C$ = "":S$ = "":E$ = ""
3110  PRINT D$;"FRE(0)": RETURN 
3200  POKE 123,D1%: POKE 124,D2%: POKE 125,D3%: POKE 126,D4%: RETURN 
3300  IF I = A% +1  THEN R% = 1: RETURN 
3310  IF  MID$ (A$,I,1) = ";"  THEN C$ =  MID$ (A$,I):R% = 1: RETURN 
3320  GOSUB 3400:T$ =  MID$ (A$,I,K -I):I = K: GOSUB 3500:I = K:R% = 0: RETURN 
3400 K = I
3410  IF K >A%  THEN  RETURN 
3420  IF  MID$ (A$,K,1) = " "  THEN  RETURN 
3430 K = K +1: GOTO 3410
3500 K = I
3510  IF K >A%  THEN  RETURN 
3520  IF  MID$ (A$,K,1) < >" "  THEN  RETURN 
3530 K = K +1: GOTO 3510
3600 EC% = EC% +1: PRINT "LINE:";D2% *256 +D1%;" *";: RETURN 
3700  IF TF%  AND P% = 2  THEN  GOSUB 3800
3710  GOSUB 4300:F% = 0: GOSUB 4600: GOSUB 7700: IF   NOT F%  AND O$ < >"END"  AND P% = 2  THEN  GOSUB 3600: PRINT "INVALID_OPCODE"
3720  IF LF%  AND P% = 2  THEN  GOSUB 8800
3730  RETURN 
3800  GOSUB 3900: IF   NOT R%  THEN  RETURN 
3810  GOSUB 4000: RETURN 
3900  IF C$ = ""  THEN  RETURN 
3910  FOR I = 2 TO  LEN(C$):T$ =  MID$ (C$,I,1): IF T$ < >" "  AND (T$ <"0"  OR T$ >"9")  AND (T$ <"A"  OR T$ >"F")  THEN R% = 0: RETURN 
3920  NEXT :R% = 1: RETURN 
4000 I = 2
4010  IF I > =  LEN(C$)  THEN  RETURN 
4020  GOSUB 4100:E$ =  MID$ (C$,I,2):M = 1: GOSUB 6000: GOSUB 4200:I = I +2: GOTO 4010
4100  IF I > =  LEN(C$)  THEN  RETURN 
4110  IF  MID$ (C$,I,1) < >" "  THEN  RETURN 
4120 I = I +1: GOTO 4100
4200  IF TC% = 256  THEN  GOSUB 3600: PRINT "TST_OVER": STOP 
4210  POKE TW%,E:TW% = TW% +1: IF TW% >31487  THEN TW% = 31232
4220 TC% = TC% +1: RETURN 
4300 LI% =  -1: IF L$ = ""  OR P% = 2  THEN  RETURN 
4310 S$ = L$: GOSUB 4400: IF SI% < > -1  THEN  GOSUB 3600: PRINT "DUP_LABEL": RETURN 
4320  GOSUB 4500: IF SI% =  -1  THEN  GOSUB 3600: PRINT "TOO_MANY_LABELS": STOP 
4330 LI% = SI%:SN$(LI%) = L$:SV(LI%) = P: RETURN 
4400  IF SC% = 0  THEN SI% =  -1: RETURN 
4410  FOR M = 0 TO SC% -1: IF SN$(M) = S$  THEN SI% = M: RETURN 
4420  NEXT :SI% =  -1: RETURN 
4500  IF SC% = 256  THEN SI% =  -1: RETURN 
4510 SI% = SC%:SC% = SC% +1: RETURN 
4600  IF O$ = ""  THEN F% = 1: RETURN 
4610  GOSUB 4700: IF   NOT F%  THEN  RETURN 
4620  GOSUB 4900: RETURN 
4700  RESTORE : FOR I = 1 TO IC%: READ T$: IF T$ = O$  THEN F% = 1: GOSUB 4800: RETURN 
4710  GOSUB 2500
4720  NEXT : READ T$: RETURN 
4800  FOR K = 0 TO 13: READ O%(K): NEXT : RETURN 
4900 L% =  LEN(P$): GOSUB 5000: IF P$ = ""  THEN  GOSUB 5100: RETURN 
4910  IF  MID$ (P$,1,1) = "#"  THEN  GOSUB 5700: RETURN 
4920  GOSUB 6300: IF R%  THEN  GOSUB 6400: RETURN 
4930  GOSUB 6800: IF R%  THEN  GOSUB 6900: RETURN 
4940  GOSUB 7000: IF R%  THEN  GOSUB 7100: RETURN 
4950  GOSUB 7200: IF R%  THEN  GOSUB 7300: RETURN 
4960  GOSUB 7400: IF R%  THEN  GOSUB 7500: RETURN 
4970  GOSUB 7600: RETURN 
5000 OP% =  -1:CP% =  -1:CM% =  -1: IF L% = 0  THEN  RETURN 
5010  FOR I = 1 TO L%:T$ =  MID$ (P$,I,1): IF T$ = "("  THEN OP% = I
5020  IF T$ = ")"  THEN CP% = I
5030  IF T$ = ","  THEN CM% = I
5040  NEXT : RETURN 
5100  IF O%(3) = 255  THEN  GOSUB 5200: RETURN 
5110 X% = O%(3): GOSUB 5300: RETURN 
5200  IF P% = 2  THEN  GOSUB 3600: PRINT "BAD_ADDR"
5210  RETURN 
5300  IF P% = 2  AND X% < > PEEK(P)  THEN  GOSUB 3600: PRINT "PHASE": STOP 
5310  GOSUB 5400: RETURN 
5400  IF P > = 38400  THEN  GOSUB 3600: PRINT "OOM": STOP 
5410  POKE P,X%:P = P +1: IF TF%  AND P% = 2  THEN  GOSUB 5500
5420  RETURN 
5500  GOSUB 5600: IF T% < >X%  THEN  GOSUB 10000
5510  RETURN 
5600  IF TC% = 0  THEN  GOSUB 3600: PRINT "TST_UNDER": STOP 
5610 T% =  PEEK(TR%):TR% = TR% +1: IF TR% >31487  THEN TR% = 31232
5620 TC% = TC% -1: RETURN 
5700  IF 2 >L%  THEN  GOSUB 5800: RETURN 
5710 T$ =  MID$ (P$,2,1): IF T$ = "<"  THEN E$ =  MID$ (P$,3): GOSUB 5900:E = E - INT(E/256) *256: GOTO 5740
5720  IF T$ = ">"  THEN E$ =  MID$ (P$,3): GOSUB 5900:E = (E/256): GOTO 5740
5730 E$ =  MID$ (P$,2): GOSUB 5900
5740  IF O%(0) = 255  THEN  GOSUB 5200: RETURN 
5750  IF E <256  THEN X% = O%(0): GOSUB 5300:X% = E: GOSUB 5400: RETURN 
5760  IF P% = 2  THEN  GOSUB 3600: PRINT "TOO_BIG"
5770  RETURN 
5800 E = 0: IF P% = 2  THEN  GOSUB 3600: PRINT "BAD_EXPR"
5810  RETURN 
5900  IF E$ = ""  THEN  GOSUB 5800: RETURN 
5910 T$ =  MID$ (E$,1,1): IF T$ = "$"  THEN M = 2: GOSUB 6000: RETURN 
5920  IF T$ > = "0"  AND T$ < = "9"  THEN  GOSUB 6100: RETURN 
5930  GOSUB 6200: RETURN 
6000 N% =  LEN(E$): IF N% -M +1 <1  THEN  GOSUB 5800: RETURN 
6010 E = 0
6015  IF M >N%  THEN  RETURN 
6017 T% =  ASC( MID$ (E$,M,1)): IF T% > = 48  AND T% < = 57  THEN T% = T% -48: GOTO 6050
6020  IF T% > = 65  AND T% < = 70  THEN T% = T% -55: GOTO 6050
6030 E = 0: IF P% = 2  THEN  GOSUB 3600: PRINT "BAD_HEX": RETURN 
6040  RETURN 
6050 E = E *16 +T%:M = M +1: GOTO 6015
6100 E =  VAL(E$): RETURN 
6200 S$ = E$: GOSUB 4400: IF SI% < > -1  THEN E = SV(SI%): RETURN 
6210  IF P% = 1  THEN E = 256: RETURN 
6220 E = 256: GOSUB 3600: PRINT "BAD_LABEL": RETURN 
6300 R% = CM% =  -1  AND OP% =  -1  AND CP% =  -1: RETURN 
6400 E$ = P$: GOSUB 5900: IF O%(10) = 255  THEN I = 2:K = 1: GOSUB 6500: RETURN 
6410 E = E -A -2:X% = O%(10): GOSUB 5300: GOSUB 6600
6420  IF P% = 2  AND (E < -128  OR E >127)  THEN  GOSUB 3600: PRINT "TOO_FAR"
6430  RETURN 
6500  IF E <256  AND O%(I) < >255  THEN X% = O%(I): GOSUB 5300: GOSUB 6600: RETURN 
6510  IF O%(K) < >255  THEN X% = O%(K): GOSUB 5300: GOSUB 6700: RETURN 
6520  GOSUB 5200: RETURN 
6600 X% = E - INT(E/256) *256: GOSUB 5400: RETURN 
6700  GOSUB 6600:X% = E/256: GOSUB 5400: RETURN 
6800 R% = CM% < > -1  AND OP% =  -1  AND CP% =  -1: RETURN 
6900 E$ =  MID$ (P$,1,CM% -1): GOSUB 5900:T$ =  MID$ (P$,CM% +1,1): IF T$ = "X"  THEN I = 6:K = 8: GOSUB 6500: RETURN 
6910  IF T$ = "Y"  THEN I = 7:K = 9: GOSUB 6500: RETURN 
6920  GOSUB 5200: RETURN 
7000 R% = CM% < > -1  AND OP% < > -1  AND CP% < > -1  AND CP% >CM%  AND OP% <CM%: RETURN 
7100 E$ =  MID$ (P$,OP% +1,CM% -OP% -1): GOSUB 5900: IF  MID$ (P$,CM% +1,1) < >"X"  THEN  GOSUB 5200: RETURN 
7110 I = 4:K = 12: GOSUB 6500: RETURN 
7200 R% = CM% < > -1  AND OP% < > -1  AND CP% < > -1  AND CP% <CM%  AND OP% <CP%: RETURN 
7300 E$ =  MID$ (P$,OP% +1,CP% -OP% -1): GOSUB 5900: IF  MID$ (P$,CM% +1,1) < >"Y"  THEN  GOSUB 5200: RETURN 
7310  IF E <256  AND O%(5) < >255  THEN X% = O%(5): GOSUB 5300: GOSUB 6600: RETURN 
7320  GOSUB 5200: RETURN 
7400 R% = CM% =  -1  AND OP% < > -1  AND CP% < > -1  AND OP% <CP%: RETURN 
7500 E$ =  MID$ (P$,OP% +1,CP% -OP% -1): GOSUB 5900:I = 13:K = 11: GOSUB 6500: RETURN 
7600  IF P% = 1  THEN  RETURN 
7610  GOSUB 3600: PRINT "BAD_OPERAND": RETURN 
7700  IF F%  THEN  RETURN 
7710  GOSUB 7800: IF   NOT F%  THEN  RETURN 
7720 L% =  LEN(P$): ON I GOSUB 7900,8000,8200,8300,8400,8500,8600,8700: RETURN 
7800  FOR I = 1 TO DC%: READ T$: IF T$ = O$  THEN F% = 1: RETURN 
7810  NEXT : RETURN 
7900  IF  MID$ (P$,1,1) < >"'"  OR  MID$ (P$,L%,1) < >"'"  THEN  GOSUB 7600: RETURN 
7910 L% = L% -1: FOR I = 2 TO L%:X% =  ASC( MID$ (P$,I,1)): GOSUB 5300: NEXT 
7920  RETURN 
8000  FOR I = 1 TO L%: GOSUB 8100:E$ =  MID$ (P$,I,K -I): GOSUB 5900: GOSUB 6600:I = K: NEXT : RETURN 
8100  FOR K = I TO L%: IF  MID$ (P$,K,1) = ","  THEN  RETURN 
8110  NEXT : RETURN 
8200  IF P$ = "/"  THEN E =  INT((P +256)/256) *256 -P: GOTO 8220
8210 E$ = P$: GOSUB 5900
8220 X% = 0: FOR I = 1 TO E: GOSUB 5300: NEXT : RETURN 
8300  FOR I = 1 TO L%: GOSUB 8100:E$ =  MID$ (P$,I,K -I): GOSUB 5900: GOSUB 6700:I = K: NEXT : RETURN 
8400 E$ = P$: GOSUB 5900: IF P% = 2  THEN  RETURN 
8410  IF LI% =  -1  THEN  GOSUB 3600: PRINT "EQU_NOLABEL": RETURN 
8420 SV(LI%) = E:Q = E: RETURN 
8500  IF P% = 1  THEN  RETURN 
8510  IF P$ = "ON"  THEN LF% = 1: RETURN 
8520  IF P$ = "OFF"  THEN LF% = 0: RETURN 
8530  GOSUB 7600: RETURN 
8600  IF P$ = ""  THEN  GOSUB 7600: RETURN 
8610  IF P% = 2  AND EC% = 0  THEN  PRINT D$;"BSAVE ";P$;",A31488,L";P -31488
8620  RETURN 
8700 TF% = 1: RETURN 
8800  GOSUB 8900: GOSUB 9000: IF Q < >65536  THEN  GOSUB 9300: PRINT : RETURN 
8810  GOSUB 9400: PRINT : RETURN 
8900 T$ =  STR$(D2% *256 +D1%): PRINT  TAB( 6 - LEN(T$));T$;":";: RETURN 
9000 X% = A/256: GOSUB 9100:X% = A -(X% *256): GOSUB 9100: RETURN 
9100 T% = X%/16: GOSUB 9200:T% = X% -(T% *16): GOSUB 9200: RETURN 
9200  IF T% <10  THEN  PRINT  CHR$(48 +T%);: RETURN 
9210  PRINT  CHR$(55 +T%);: RETURN 
9300  PRINT " =";: GOSUB 10200: GOSUB 9500: RETURN 
9400  IF A = P  THEN 9440
9410  FOR I = 0 TO P -A -1: IF I = 3  THEN  GOSUB 9500
9420  IF I >2  AND  INT(I/3) *3 = I  THEN  PRINT 
9430  HTAB (12 +3 *(I - INT(I/3) *3)):X% =  PEEK(A +I): GOSUB 9100: NEXT 
9440  IF P -A < = 3  THEN  GOSUB 9500
9450  RETURN 
9500  PRINT  TAB( 22);A$;: RETURN 
9600 D1% = S1%:D2% = S2%:D3% = S3%:D4% = S4%: RETURN 
9700  RETURN 
9800  HIMEM: 38400: RETURN 
9900  IF P% = 1  OR   NOT TF%  THEN  RETURN 
9910  IF TC% < >0  THEN  GOSUB 10000
9920  RETURN 
10000  GOSUB 3600: PRINT "TST_FAIL": STOP 
10010  RETURN 
10100  PRINT : PRINT "ASSEMBLY COMPLETED OF ";P -31488;" BYTES": PRINT EC%;" ERROR(S) ENCOUNTERED": PRINT : FOR I = 0 TO SC% -1: PRINT SN$(I);"= ";:Q = SV(I): GOSUB 10200: PRINT " (";SV(I);")": NEXT : RETURN 
10200 X% = Q/256: GOSUB 9100:X% = Q -(X% *256): GOSUB 9100: RETURN 
32000  DATA  " TST"
32005  DATA  "LABEL ADC #$20 ;69 20"
32010  DATA  "LONLY"
32015  DATA  ";6520"
32020  DATA  " ADC $20"
32025  DATA  "NOP ;NO OP"
32030  DATA  " ADC $120 ;6D2001"
32035  DATA  ";6114"
32040  DATA  "L1 ADC (20,X)"
32045  DATA  "L1 ;DUPE LABEL"
32050  DATA  " ADC NONE ;6D0001"
32055  DATA  " ADC FWD ;6D0F7B"
32060  DATA  "FWD"
32065  DATA  "TWO EQU 2"
32070  DATA  " ADC (TWO),Y ;7102"
32075  DATA  " DS 1 ;00"
32080  DATA  " DB 1 ;01"
32085  DATA  " DB 254,$FF,TWO ;FEFF02"
32090  DATA  " DW 256 ;0001"
32095  DATA  " DW 0,$3412,TWO ;000012340200"
32100  DATA  " ASC 'A' ;41"
32105  DATA  " ASC 'A09Z' ;4130395A"
32110  DATA  " ADC #>$1234 ;6912"
32115  DATA  " ADC #<$1234 ;6934"
32120  DATA  " ADC 255,X ;75FF"
32125  DATA  " ADC 256,X ;7D0001"
32130  DATA  " ADC (1) ;7201"
32135  DATA  " ADC"
32140  DATA  " ADC 255,Y ;79FF00"
32145  DATA  " ADC (256)"
32150  DATA  " ADC (256,X)"
32155  DATA  ";6914"
32160  DATA  " ADC #20 EXTRA_INPUT"
32165  DATA  " FOO_BAR"
32170  DATA  " ADC #$100"
32175  DATA  " DB $F,$FG,$,, ;0F000000" 
32180  DATA  " ADC #"
32185  DATA  " ADC 0,Z"
32190  DATA  " ADC 0,"
32195  DATA  " ADC (0,Y)"
32200  DATA  " ADC (0),X"
32205  DATA  " ADC (256),Y"
32210  DATA  " ASC FOO'"
32215  DATA  " ASC 'FOO"
32220  DATA  " EQU 23"
32225  DATA  " LST"
32230  DATA  " SAV"
32235  DATA  " ADC #<$FFFE ;69FE"
32240  DATA  " ADC #>$FFFE ;69FF"
32245  DATA  " ADC $FFFE ;6DFEFF"
32250  DATA  " AND #$FF ;29FF"
32255  DATA  " AND $FFFE ;2DFEFF"
32260  DATA  " AND $FF ;25FF"
32265  DATA  " AND"
32270  DATA  " AND ($FF,X) ;21FF"
32275  DATA  " AND ($FF),Y ;31FF"
32280  DATA  " AND $FF,X ;35FF"
32285  DATA  " AND $FF,Y ;39FF00"
32290  DATA  " AND $FFFE,X ;3DFEFF"
32295  DATA  " AND $FFFE,Y ;39FEFF"
32300  DATA  " AND ($FFFE)"
32305  DATA  " AND ($FFFE,X)"
32310  DATA  " AND ($FF) ;32FF"
32315  DATA  " ASL #$FF"
32320  DATA  " ASL $FFFE ;0EFEFF"
32325  DATA  " ASL $FF ;06FF"
32330  DATA  " ASL ;0A"
32335  DATA  " ASL ($FF,X)"
32340  DATA  " ASL ($FF),Y"
32345  DATA  " ASL $FF,X ;16FF"
32350  DATA  " ASL $FF,Y"
32355  DATA  " ASL $FFFE,X ;1EFEFF"
32360  DATA  " ASL $FFFE,Y"
32365  DATA  " ASL ($FFFE)"
32370  DATA  " ASL ($FFFE,X)"
32375  DATA  " ASL ($FF)"
32380  DATA  "BB DS 1 ;00"
32385  DATA  " BCC BB ;90FD"
32390  DATA  " BCC FB ;9010"
32395  DATA  " BCS BB ;B0F9"
32400  DATA  " BEQ BB ;F0F7"
32405  DATA  " BMI BB ;30F5"
32410  DATA  " BNE BB ;D0F3"
32415  DATA  " BPL BB ;10F1"
32420  DATA  " BRA BB ;80EF"
32425  DATA  " BVC BB ;50ED"
32430  DATA  " BVS BB ;70EB"
32435  DATA  "FB"
32438  DATA " BRA $7BF8 ;8080"
32440  DATA  " BIT #$FF ;89FF"
32445  DATA  " BIT $FFFE ;2CFEFF"
32450  DATA  " BIT $FF ;24FF"
32455  DATA  " BIT"
32460  DATA  " BIT ($FF,X)"
32465  DATA  " BIT ($FF),X"
32470  DATA  " BIT $FF,X ;34FF"
32475  DATA  " BIT $FF,Y"
32480  DATA  " BIT $FFFE,X ;3CFEFF"
32485  DATA  " BIT $FFFE,Y"
32490  DATA  " BIT ($FFFE)"
32495  DATA  " BIT ($FF)"
32500  DATA  " BRK ;00"
32505  DATA  " CLC ;18"
32510  DATA  " CLD ;D8"
32515  DATA  " CLI ;58"
32520  DATA " CLV ;B8"
32525  DATA " CMP #$FF ;C9FF"
32530  DATA " CMP $FFFE ;CDFEFF"
32535  DATA " CMP $FF ;C5FF"
32540  DATA " CMP ($FF,X) ;C1FF"
32545  DATA " CMP ($FF),Y ;D1FF"
32550  DATA " CMP $FF,X ;D5FF"
32555  DATA " CMP $FF,Y ;D9FF00"
32560  DATA " CMP $FFFE,X ;DDFEFF"
32565  DATA " CMP $FFFE,Y ;D9FEFF"
32570  DATA " CMP ($FF) ;D2FF"
32575  DATA " CPX #$FF ;E0FF"
32580  DATA " CPX $FFFE ;ECFEFF"
32585  DATA " CPX $FF ;E4FF"
32590  DATA " CPY #$FF ;C0FF"
32595  DATA " CPY $FFFE ;CCFEFF"
32600  DATA " CPY $FF ;C4FF"
32605  DATA " DEC ;3A"
32610  DATA " DEC $FFFE ;CEFEFF"
32615  DATA " DEC $FF ;C6FF"
32620  DATA " DEC $FF,X ;D6FF"
32625  DATA " DEC $FFFE,X ;DEFEFF"
32630  DATA " DEX ;CA"
32635  DATA " DEY ;88"
32640  DATA " EOR #$FF ;49FF"
32645  DATA " EOR $FFFE ;4DFEFF"
32650  DATA " EOR $FF ;45FF"
32655  DATA " EOR ($FF,X) ;41FF"
32660  DATA " EOR ($FF),Y ;51FF"
32665  DATA " EOR $FF,X ;55FF"
32670  DATA " EOR $FFFE,X ;5DFEFF"
32675  DATA " EOR $FFFE,Y ;59FEFF"
32680  DATA " EOR ($FF) ;52FF"
32685  DATA " INC ;1A"
32690  DATA " INC $FFFE ;EEFEFF"
32695  DATA " INC $FF ;E6FF"
32700  DATA " INC $FF,X ;F6FF"
32705  DATA " INC $FFFE,X ;FEFEFF"
32710  DATA " INX ;E8"
32715  DATA " INY ;C8"
32720  DATA " JMP $FFFE ;4CFEFF"
32725  DATA " JMP ($FFFE) ;6CFEFF"
32730  DATA " JMP ($FFFE,X) ;7CFEFF"
32735  DATA " JSR $FFFE ;20FEFF"
32736  DATA ";00000000000000000000000000000000000000000000"
32737  DATA " DS /"
32740  DATA " LDA #$FF ;A9FF"
32745  DATA " LDA $FFFE ;ADFEFF"
32750  DATA " LDA $FF ;A5FF"
32755  DATA " LDA ($FF,X) ;A1FF"
32760  DATA " LDA ($FF),Y ;B1FF"
32765  DATA " LDA $FF,X ;B5FF"
32770  DATA " LDA $FFFE,X ;BDFEFF"
32775  DATA " LDA $FFFE,Y ;B9FEFF"
32780  DATA " LDA ($FF) ;B2FF"
32785  DATA " LDX #$FF ;A2FF"
32790  DATA " LDX $FFFE ;AEFEFF"
32795  DATA " LDX $FF ;A6FF"
32800  DATA " LDX $FF,Y ;B6FF"
32805  DATA " LDX $FFFE,Y ;BEFEFF"
32810  DATA " LDY #$FF ;A0FF"
32815  DATA " LDY $FFFE ;ACFEFF"
32820  DATA " LDY $FF ;A4FF"
32825  DATA " LDY $FF,X ;B4FF"
32830  DATA " LDY $FFFE,X ;BCFEFF"
32835  DATA " LSR $FFFE ;4EFEFF"
32840  DATA " LSR $FF ;46FF"
32845  DATA " LSR ;4A"
32850  DATA " LSR $FF,X ;56FF"
32855  DATA " LSR $FFFE,X ;5EFEFF"
32860  DATA " NOP ;EA"
32865  DATA " ORA #$FF ;09FF"
32870  DATA " ORA $FFFE ;0DFEFF"
32875  DATA " ORA $FF ;05FF"
32880  DATA " ORA ($FF,X) ;01FF"
32885  DATA " ORA ($FF),Y ;11FF"
32890  DATA " ORA $FF,X ;15FF"
32895  DATA " ORA $FFFE,X ;1DFEFF"
32900  DATA " ORA $FFFE,Y ;19FEFF"
32905  DATA " ORA ($FF) ;12FF"
32910  DATA " PHA ;48"
32915  DATA " PHP ;08"
32920  DATA " PHX ;DA"
32925  DATA " PHY ;5A"
32930  DATA " PLA ;68"
32935  DATA " PLP ;28"
32940  DATA " PLX ;FA"
32945  DATA " PLY ;7A"
32950  DATA " ROL $FFFE ;2EFEFF"
32955  DATA " ROL $FF ;26FF"
33000  DATA " ROL ;2A"
33005  DATA " ROL $FF,X ;36FF"
33010  DATA " ROL $FFFE,X ;3EFEFF"
33015  DATA " ROR $FFFE ;6EFEFF"
33020  DATA " ROR $FF ;66FF"
33025  DATA " ROR ;6A"
33030  DATA " ROR $FF,X ;76FF"
33035  DATA " ROR $FFFE,X ;7EFEFF"
33040  DATA " RTI ;40"
33045  DATA " RTS ;60"
33050  DATA " SBC #$FF ;E9FF"
33055  DATA " SBC $FFFE ;EDFEFF"
33060  DATA " SBC $FF ;E5FF"
33065  DATA " SBC ($FF,X) ;E1FF"
33070  DATA " SBC ($FF),Y ;F1FF"
33075  DATA " SBC $FF,X ;F5FF"
33080  DATA " SBC $FF,Y ;F9FF00"
33085  DATA " SBC $FFFE,X ;FDFEFF"
33090  DATA " SBC $FFFE,Y ;F9FEFF"
33095  DATA " SBC ($FF) ;F2FF"
33100  DATA " SEC ;38"
33105  DATA " SED ;F8"
33110  DATA " SEI ;78"
33115  DATA " STA $FFFE ;8DFEFF"
33120  DATA " STA $FF ;85FF"
33125  DATA " STA ($FF,X) ;81FF"
33130  DATA " STA ($FF),Y ;91FF"
33135  DATA " STA $FF,X ;95FF"
33140  DATA " STA $FF,Y ;99FF00"
33145  DATA " STA $FFFE,X ;9DFEFF"
33150  DATA " STA $FFFE,Y ;99FEFF"
33155  DATA " STA ($FF) ;92FF"
33160  DATA " STX $FFFE ;8EFEFF"
33165  DATA " STX $FF ;86FF"
33170  DATA " STX $FF,Y ;96FF"
33175  DATA " STY $FFFE ;8CFEFF"
33180  DATA " STY $FF ;84FF"
33185  DATA " STY $FF,X ;94FF"
33190  DATA " STZ $FFFE ;9CFEFF"
33195  DATA " STZ $FF ;64FF"
33200  DATA " STZ $FF,X ;74FF"
33205  DATA " STZ $FFFE,X ;9EFEFF"
33210  DATA " TAX ;AA"
33215  DATA " TAY ;A8"
33220  DATA " TRB $FFFE ;1CFEFF"
33225  DATA " TRB $FF ;14FF"
33230  DATA " TSB $FFFE ;0CFEFF"
33235  DATA " TSB $FF ;04FF"
33240  DATA " TSX ;BA"
33245  DATA " TXA ;8A"
33250  DATA " TXS ;9A"
33255  DATA " TYA ;98"
63996  DATA " SAV TEST.BIN"
63997  DATA "; 41 ERRORS ARE EXPECTED"
63998  DATA  " LST OFF"
63999  DATA  " END"