1  REM  COPYRIGHT 2013 ADAM GREEN (HTTP://GITHUB.COM/ADAMGREEN)
2  REM  LICENSED UNDER THE APACHE LICENSE, VERSION 2.0
3  REM  SEE APACHE.BAS FOR LICENSE INFO.
4  REM 
5  REM  SIMPLE 6502 SYMBOLIC ASSEMBLER
1000  DATA ADC,105,109,101,255,97,113,117,255,125,121,255,255,255,114
1001  DATA AND,41,45,37,255,33,49,53,255,61,57,255,255,255,50
1002  DATA ASC,0
1003  DATA ASL,255,14,6,10,255,255,22,255,30,255,255,255,255,255
1004  DATA BCC,255,255,255,255,255,255,255,255,255,255,144,255,255,255
1005  DATA BCS,255,255,255,255,255,255,255,255,255,255,176,255,255,255
1006  DATA BEQ,255,255,255,255,255,255,255,255,255,255,240,255,255,255
1007  DATA BIT,137,44,36,255,255,255,52,255,60,255,255,255,255,255
1008  DATA BMI,255,255,255,255,255,255,255,255,255,255,48,255,255,255
1009  DATA BNE,255,255,255,255,255,255,255,255,255,255,208,255,255,255
1010  DATA BPL,255,255,255,255,255,255,255,255,255,255,16,255,255,255
1011  DATA BRA,255,255,255,255,255,255,255,255,255,255,128,255,255,255
1012  DATA BRK,255,255,255,0,255,255,255,255,255,255,255,255,255,255
1013  DATA BVC,255,255,255,255,255,255,255,255,255,255,80,255,255,255
1014  DATA BVS,255,255,255,255,255,255,255,255,255,255,112,255,255,255
1015  DATA CLC,255,255,255,24,255,255,255,255,255,255,255,255,255,255
1016  DATA CLD,255,255,255,216,255,255,255,255,255,255,255,255,255,255
1017  DATA CLI,255,255,255,88,255,255,255,255,255,255,255,255,255,255
1018  DATA CLV,255,255,255,184,255,255,255,255,255,255,255,255,255,255
1019  DATA CMP,201,205,197,255,193,209,213,255,221,217,255,255,255,210
1020  DATA CPX,224,236,228,255,255,255,255,255,255,255,255,255,255,255
1021  DATA CPY,192,204,196,255,255,255,255,255,255,255,255,255,255,255
1022  DATA DB,0
1023  DATA DEC,255,206,198,58,255,255,214,255,222,255,255,255,255,255
1024  DATA DEX,255,255,255,202,255,255,255,255,255,255,255,255,255,255
1025  DATA DEY,255,255,255,136,255,255,255,255,255,255,255,255,255,255
1026  DATA DS,0
1027  DATA DW,0
1028  DATA EOR,73,77,69,255,65,81,85,255,93,89,255,255,255,82
1029  DATA EQU,0
1030  DATA INC,255,238,230,26,255,255,246,255,254,255,255,255,255,255
1031  DATA INX,255,255,255,232,255,255,255,255,255,255,255,255,255,255
1032  DATA INY,255,255,255,200,255,255,255,255,255,255,255,255,255,255
1033  DATA JMP,255,76,255,255,255,255,255,255,255,255,255,108,124,255
1034  DATA JSR,255,32,255,255,255,255,255,255,255,255,255,255,255,255
1035  DATA LDA,169,173,165,255,161,177,181,255,189,185,255,255,255,178
1036  DATA LDX,162,174,166,255,255,255,255,182,255,190,255,255,255,255
1037  DATA LDY,160,172,164,255,255,255,180,255,188,255,255,255,255,255
1038  DATA LSR,255,78,70,74,255,255,86,255,94,255,255,255,255,255
1039  DATA LST,0
1040  DATA NOP,255,255,255,234,255,255,255,255,255,255,255,255,255,255
1041  DATA ORA,9,13,5,255,1,17,21,255,29,25,255,255,255,18
1042  DATA PHA,255,255,255,72,255,255,255,255,255,255,255,255,255,255
1043  DATA PHP,255,255,255,8,255,255,255,255,255,255,255,255,255,255
1044  DATA PHX,255,255,255,218,255,255,255,255,255,255,255,255,255,255
1045  DATA PHY,255,255,255,90,255,255,255,255,255,255,255,255,255,255
1046  DATA PLA,255,255,255,104,255,255,255,255,255,255,255,255,255,255
1047  DATA PLP,255,255,255,40,255,255,255,255,255,255,255,255,255,255
1048  DATA PLX,255,255,255,250,255,255,255,255,255,255,255,255,255,255
1049  DATA PLY,255,255,255,122,255,255,255,255,255,255,255,255,255,255
1050  DATA ROL,255,46,38,42,255,255,54,255,62,255,255,255,255,255
1051  DATA ROR,255,110,102,106,255,255,118,255,126,255,255,255,255,255
1052  DATA RTI,255,255,255,64,255,255,255,255,255,255,255,255,255,255
1053  DATA RTS,255,255,255,96,255,255,255,255,255,255,255,255,255,255
1054  DATA SAV,0
1055  DATA SBC,233,237,229,255,225,241,245,255,253,249,255,255,255,242
1056  DATA SEC,255,255,255,56,255,255,255,255,255,255,255,255,255,255
1057  DATA SED,255,255,255,248,255,255,255,255,255,255,255,255,255,255
1058  DATA SEI,255,255,255,120,255,255,255,255,255,255,255,255,255,255
1059  DATA STA,255,141,133,255,129,145,149,255,157,153,255,255,255,146
1060  DATA STX,255,142,134,255,255,255,255,150,255,255,255,255,255,255
1061  DATA STY,255,140,132,255,255,255,148,255,255,255,255,255,255,255
1062  DATA STZ,255,156,100,255,255,255,116,255,158,255,255,255,255,255
1063  DATA TAX,255,255,255,170,255,255,255,255,255,255,255,255,255,255
1064  DATA TAY,255,255,255,168,255,255,255,255,255,255,255,255,255,255
1065  DATA TRB,255,28,20,255,255,255,255,255,255,255,255,255,255,255
1066  DATA TSB,255,12,4,255,255,255,255,255,255,255,255,255,255,255
1067  DATA TST,0
1068  DATA TSX,255,255,255,186,255,255,255,255,255,255,255,255,255,255
1069  DATA TXA,255,255,255,138,255,255,255,255,255,255,255,255,255,255
1070  DATA TXS,255,255,255,154,255,255,255,255,255,255,255,255,255,255
1071  DATA TYA,255,255,255,152,255,255,255,255,255,255,255,255,255,255
1099  DATA  ""
2000  CLEAR : GOSUB 2100: GOSUB 2800: PRINT "ASSEMBLY STARTED":P% = 1: GOSUB 2900: GOSUB 9600:P% = 2: GOSUB 2900: GOSUB 9900: GOSUB 9700: GOSUB 10100: GOSUB 9800: END 
2100  SPEED= 255: TEXT : HOME : GOSUB 2200: GOSUB 2400: GOSUB 10400: GOSUB 2300: GOSUB 2600: RETURN 
2200 P =  PEEK(116) *256 + PEEK(115): IF P = 30208  THEN  RETURN 
2210  IF P < >38400  THEN  PRINT "*HIMEM": STOP 
2220  IF  PEEK(110) *256 + PEEK(109) > = 30208  THEN  PRINT "*NORAM": STOP 
2230  HIMEM: 30208: RETURN 
2300 LF% = 1:TF% = 0:IC% = 0:DC% = 0:SC% = 0:EC% = 0:TW% = 31232:TR% = 31232:TC% = 0
2310 D$ =  CHR$(4)
2320  DIM O%(13): DIM SN$(255): DIM SV(255)
2330  RETURN 
2400 OC% =  -1
2410  READ T$: IF T$ = ""  THEN  RETURN 
2420 OC% = OC% +1: READ T%: IF T% >0  THEN  GOSUB 2500
2430  GOTO 2410
2500  FOR K = 1 TO 13: READ T%: NEXT : RETURN 
2600  GOSUB 2700:S1% = D1%:S2% = D2%:S3% = D3%:S4% = D4%: RETURN 
2700 D1% =  PEEK(123):D2% =  PEEK(124):D3% =  PEEK(125):D4% =  PEEK(126): RETURN 
2800  RETURN 
2900 P = 31488
2910  GOSUB 3000: GOSUB 3700: IF O$ = "END"  THEN  RETURN 
2920  GOTO 2910
3000  GOSUB 3100: GOSUB 3200: READ A$: GOSUB 2700:A% =  LEN(A$):A = P:Q = 65536:I = 1: GOSUB 3300: IF R%  THEN  RETURN 
3010 L$ = T$: GOSUB 3300: IF R%  THEN  RETURN 
3020 O$ = T$: GOSUB 3300: IF R%  THEN  RETURN 
3030 P$ = T$: GOSUB 3300: IF   NOT R%  AND P% = 2  THEN  GOSUB 3600: PRINT "EXTRA_INPUT"
3040  RETURN 
3100 T$ = "":A$ = "":L$ = "":O$ = "":P$ = "":C$ = "":S$ = "":E$ = ""
3110  PRINT D$;"FRE(0)": RETURN 
3200  POKE 123,D1%: POKE 124,D2%: POKE 125,D3%: POKE 126,D4%: RETURN 
3300  IF I = A% +1  THEN R% = 1: RETURN 
3310 T$ =  MID$ (A$,I,1): IF T$ = ";"  THEN C$ =  MID$ (A$,I):R% = 1: RETURN 
3320  IF T$ = "'"  OR T$ = "`"  THEN  GOSUB 10300:K = K +1: GOTO 3340
3330  GOSUB 3400
3340 T$ =  MID$ (A$,I,K -I):I = K: GOSUB 3500:I = K:R% = 0: RETURN 
3400 K = I
3410  IF K >A%  THEN  RETURN 
3420  IF  MID$ (A$,K,1) = " "  THEN  RETURN 
3430 K = K +1: GOTO 3410
3500 K = I
3510  IF K >A%  THEN  RETURN 
3520  IF  MID$ (A$,K,1) < >" "  THEN  RETURN 
3530 K = K +1: GOTO 3510
3600 EC% = EC% +1: PRINT "LINE:";D2% *256 +D1%;" *";: RETURN 
3700  IF TF%  AND P% = 2  THEN  GOSUB 3800
3710  GOSUB 4300: GOSUB 4600: IF F% = 1  THEN  GOSUB 4900
3720  IF F% = 2  THEN  GOSUB 7700
3730  IF F% = 0  AND O$ < >"END"  AND P% = 2  THEN  GOSUB 3600: PRINT "INVALID_OPCODE"
3740  IF LF%  AND P% = 2  THEN  GOSUB 8800
3750  RETURN 
3800  GOSUB 3900: IF   NOT R%  THEN  RETURN 
3810  GOSUB 4000: RETURN 
3900  IF C$ = ""  THEN  RETURN 
3910  FOR I = 2 TO  LEN(C$):T$ =  MID$ (C$,I,1): IF T$ < >" "  AND (T$ <"0"  OR T$ >"9")  AND (T$ <"A"  OR T$ >"F")  THEN R% = 0: RETURN 
3920  NEXT :R% = 1: RETURN 
4000 I = 2
4010  IF I > =  LEN(C$)  THEN  RETURN 
4020  GOSUB 4100:E$ =  MID$ (C$,I,2):M = 1: GOSUB 6000: GOSUB 4200:I = I +2: GOTO 4010
4100  IF I > =  LEN(C$)  THEN  RETURN 
4110  IF  MID$ (C$,I,1) < >" "  THEN  RETURN 
4120 I = I +1: GOTO 4100
4200  IF TC% = 256  THEN  GOSUB 3600: PRINT "TST_OVER": STOP 
4210  POKE TW%,E:TW% = TW% +1: IF TW% >31487  THEN TW% = 31232
4220 TC% = TC% +1: RETURN 
4300 LI% =  -1: IF L$ = ""  OR P% = 2  THEN  RETURN 
4310 S$ = L$: GOSUB 4400: IF SI% < > -1  THEN  GOSUB 3600: PRINT "DUP_LABEL": RETURN 
4320  GOSUB 4500: IF SI% =  -1  THEN  GOSUB 3600: PRINT "TOO_MANY_LABELS": STOP 
4330 LI% = SI%:SN$(LI%) = L$:SV(LI%) = P: RETURN 
4400  IF SC% = 0  THEN SI% =  -1: RETURN 
4410  FOR M = 0 TO SC% -1: IF SN$(M) = S$  THEN SI% = M: RETURN 
4420  NEXT :SI% =  -1: RETURN 
4500  IF SC% = 256  THEN SI% =  -1: RETURN 
4510 SI% = SC%:SC% = SC% +1: RETURN 
4600 K = 0:M = OC%: IF O$ = ""  THEN F% = 4: RETURN 
4610  IF K >M  THEN F% = 0: RETURN 
4620 I =  INT((M +K)/2): IF O$ <OM$(I)  THEN M = I -1: GOTO 4610
4630  IF O$ >OM$(I)  THEN K = I +1: GOTO 4610
4640  IF OL%(I) <1000  THEN I = OL%(I):F% = 2: RETURN 
4650 T% =  INT(OL%(I)/256): POKE 124,T%: POKE 123,OL%(I) -T% *256:T% =  INT(OP%(I)/256): POKE 126,T%: POKE 125,OP%(I) -T% *256: FOR K = 0 TO 13: READ O%(K): NEXT :F% = 1: RETURN 
4900 L% =  LEN(P$): GOSUB 5000: IF P$ = ""  THEN  GOSUB 5100: RETURN 
4910  IF  MID$ (P$,1,1) = "#"  THEN  GOSUB 5700: RETURN 
4920  GOSUB 6300: IF R%  THEN  GOSUB 6400: RETURN 
4930  GOSUB 6800: IF R%  THEN  GOSUB 6900: RETURN 
4940  GOSUB 7000: IF R%  THEN  GOSUB 7100: RETURN 
4950  GOSUB 7200: IF R%  THEN  GOSUB 7300: RETURN 
4960  GOSUB 7400: IF R%  THEN  GOSUB 7500: RETURN 
4970  GOSUB 7600: RETURN 
5000 OP% =  -1:CP% =  -1:CM% =  -1: IF L% = 0  THEN  RETURN 
5010  FOR I = 1 TO L%:T$ =  MID$ (P$,I,1): IF T$ = "("  THEN OP% = I
5020  IF T$ = ")"  THEN CP% = I
5030  IF T$ = ","  THEN CM% = I
5040  NEXT : RETURN 
5100  IF O%(3) = 255  THEN  GOSUB 5200: RETURN 
5110 X% = O%(3): GOSUB 5300: RETURN 
5200  IF P% = 2  THEN  GOSUB 3600: PRINT "BAD_ADDR"
5210  RETURN 
5300  IF P% = 2  AND X% < > PEEK(P)  THEN  GOSUB 3600: PRINT "PHASE": STOP 
5310  GOSUB 5400: RETURN 
5400  IF P > = 39424  THEN  GOSUB 3600: PRINT "OOM": STOP 
5410  POKE P,X%:P = P +1: IF TF%  AND P% = 2  THEN  GOSUB 5500
5420  RETURN 
5500  GOSUB 5600: IF T% < >X%  THEN  GOSUB 10000
5510  RETURN 
5600  IF TC% = 0  THEN  GOSUB 3600: PRINT "TST_UNDER": STOP 
5610 T% =  PEEK(TR%):TR% = TR% +1: IF TR% >31487  THEN TR% = 31232
5620 TC% = TC% -1: RETURN 
5700  IF 2 >L%  THEN  GOSUB 5800: RETURN 
5710 T$ =  MID$ (P$,2,1): IF T$ = "<"  THEN E$ =  MID$ (P$,3): GOSUB 5900:E = E - INT(E/256) *256: GOTO 5740
5720  IF T$ = ">"  THEN E$ =  MID$ (P$,3): GOSUB 5900:E = (E/256): GOTO 5740
5730 E$ =  MID$ (P$,2): GOSUB 5900
5740  IF O%(0) = 255  THEN  GOSUB 5200: RETURN 
5750  IF E <256  THEN X% = O%(0): GOSUB 5300:X% = E: GOSUB 5400: RETURN 
5760  IF P% = 2  THEN  GOSUB 3600: PRINT "TOO_BIG"
5770  RETURN 
5800 E = 0: IF P% = 2  THEN  GOSUB 3600: PRINT "BAD_EXPR"
5810  RETURN 
5900  IF E$ = ""  THEN  GOSUB 5800: RETURN 
5910 T$ =  MID$ (E$,1,1): IF T$ = "$"  THEN M = 2: GOSUB 6000: RETURN 
5920  IF T$ > = "0"  AND T$ < = "9"  THEN  GOSUB 6100: RETURN 
5930  GOSUB 6200: RETURN 
6000 N% =  LEN(E$): IF N% -M +1 <1  THEN  GOSUB 5800: RETURN 
6010 E = 0
6015  IF M >N%  THEN  RETURN 
6017 T% =  ASC( MID$ (E$,M,1)): IF T% > = 48  AND T% < = 57  THEN T% = T% -48: GOTO 6050
6020  IF T% > = 65  AND T% < = 70  THEN T% = T% -55: GOTO 6050
6030 E = 0: IF P% = 2  THEN  GOSUB 3600: PRINT "BAD_HEX": RETURN 
6040  RETURN 
6050 E = E *16 +T%:M = M +1: GOTO 6015
6100 E =  VAL(E$): RETURN 
6200 S$ = E$: GOSUB 4400: IF SI% < > -1  THEN E = SV(SI%): RETURN 
6210  IF P% = 1  THEN E = 256: RETURN 
6220 E = 256: GOSUB 3600: PRINT "BAD_LABEL": RETURN 
6300 R% = CM% =  -1  AND OP% =  -1  AND CP% =  -1: RETURN 
6400 E$ = P$: GOSUB 5900: IF O%(10) = 255  THEN I = 2:K = 1: GOSUB 6500: RETURN 
6410 E = E -A -2:X% = O%(10): GOSUB 5300: GOSUB 6600
6420  IF P% = 2  AND (E < -128  OR E >127)  THEN  GOSUB 3600: PRINT "TOO_FAR"
6430  RETURN 
6500  IF E <256  AND O%(I) < >255  THEN X% = O%(I): GOSUB 5300: GOSUB 6600: RETURN 
6510  IF O%(K) < >255  THEN X% = O%(K): GOSUB 5300: GOSUB 6700: RETURN 
6520  GOSUB 5200: RETURN 
6600 X% = E - INT(E/256) *256: GOSUB 5400: RETURN 
6700  GOSUB 6600:X% = E/256: GOSUB 5400: RETURN 
6800 R% = CM% < > -1  AND OP% =  -1  AND CP% =  -1: RETURN 
6900 E$ =  MID$ (P$,1,CM% -1): GOSUB 5900:T$ =  MID$ (P$,CM% +1,1): IF T$ = "X"  THEN I = 6:K = 8: GOSUB 6500: RETURN 
6910  IF T$ = "Y"  THEN I = 7:K = 9: GOSUB 6500: RETURN 
6920  GOSUB 5200: RETURN 
7000 R% = CM% < > -1  AND OP% < > -1  AND CP% < > -1  AND CP% >CM%  AND OP% <CM%: RETURN 
7100 E$ =  MID$ (P$,OP% +1,CM% -OP% -1): GOSUB 5900: IF  MID$ (P$,CM% +1,1) < >"X"  THEN  GOSUB 5200: RETURN 
7110 I = 4:K = 12: GOSUB 6500: RETURN 
7200 R% = CM% < > -1  AND OP% < > -1  AND CP% < > -1  AND CP% <CM%  AND OP% <CP%: RETURN 
7300 E$ =  MID$ (P$,OP% +1,CP% -OP% -1): GOSUB 5900: IF  MID$ (P$,CM% +1,1) < >"Y"  THEN  GOSUB 5200: RETURN 
7310  IF E <256  AND O%(5) < >255  THEN X% = O%(5): GOSUB 5300: GOSUB 6600: RETURN 
7320  GOSUB 5200: RETURN 
7400 R% = CM% =  -1  AND OP% < > -1  AND CP% < > -1  AND OP% <CP%: RETURN 
7500 E$ =  MID$ (P$,OP% +1,CP% -OP% -1): GOSUB 5900:I = 13:K = 11: GOSUB 6500: RETURN 
7600  IF P% = 1  THEN  RETURN 
7610  GOSUB 3600: PRINT "BAD_OPERAND": RETURN 
7700 L% =  LEN(P$): ON I +1 GOSUB 7900,8000,8200,8300,8400,8500,8600,8700: RETURN 
7800  FOR I = 1 TO DC%: READ T$: IF T$ = O$  THEN F% = 1: RETURN 
7810  NEXT : RETURN 
7900 T$ =  MID$ (P$,1,1): IF (T$ < >"'"  AND T$ < >"`")  OR  MID$ (P$,L%,1) < >T$  THEN  GOSUB 7600: RETURN 
7910 R% = 0: IF T$ = "`"  THEN R% = 128
7920 L% = L% -1: IF L% >1  THEN  FOR I = 2 TO L%:X% =  ASC( MID$ (P$,I,1)) +R%: GOSUB 5300: NEXT 
7930  RETURN 
8000  FOR I = 1 TO L%: GOSUB 8100:E$ =  MID$ (P$,I,K -I): GOSUB 5900: GOSUB 6600:I = K: NEXT : RETURN 
8100  FOR K = I TO L%: IF  MID$ (P$,K,1) = ","  THEN  RETURN 
8110  NEXT : RETURN 
8200  IF P$ = "/"  THEN E =  INT((P +255)/256) *256 -P: GOTO 8220
8210 E$ = P$: GOSUB 5900
8220  IF E >0  THEN X% = 0: FOR I = 1 TO E: GOSUB 5300: NEXT 
8230  RETURN 
8300  FOR I = 1 TO L%: GOSUB 8100:E$ =  MID$ (P$,I,K -I): GOSUB 5900: GOSUB 6700:I = K: NEXT : RETURN 
8400 E$ = P$: GOSUB 5900: IF P% = 1  AND LI% =  -1  THEN  GOSUB 3600: PRINT "EQU_NOLABEL": RETURN 
8410 Q = E: IF P% = 1  THEN SV(LI%) = E
8420  RETURN 
8500  IF P% = 1  THEN  RETURN 
8510  IF P$ = "ON"  THEN LF% = 1: RETURN 
8520  IF P$ = "OFF"  THEN LF% = 0: RETURN 
8530  GOSUB 7600: RETURN 
8600  IF P$ = ""  THEN  GOSUB 7600: RETURN 
8610  IF P% = 2  AND EC% = 0  THEN  PRINT D$;"BSAVE ";P$;",A31488,L";P -31488
8620  RETURN 
8700 TF% = 1: RETURN 
8800  GOSUB 8900: GOSUB 9000: IF Q < >65536  THEN  GOSUB 9300: PRINT : RETURN 
8810  GOSUB 9400: PRINT : RETURN 
8900 T$ =  STR$(D2% *256 +D1%): PRINT  TAB( 6 - LEN(T$));T$;":";: RETURN 
9000 X% = A/256: GOSUB 9100:X% = A -(X% *256): GOSUB 9100: RETURN 
9100 T% = X%/16: GOSUB 9200:T% = X% -(T% *16): GOSUB 9200: RETURN 
9200  IF T% <10  THEN  PRINT  CHR$(48 +T%);: RETURN 
9210  PRINT  CHR$(55 +T%);: RETURN 
9300  PRINT " =";: GOSUB 10200: GOSUB 9500: RETURN 
9400  IF A = P  THEN 9440
9410  FOR I = 0 TO P -A -1: IF I = 3  THEN  GOSUB 9500
9420  IF I >2  AND  INT(I/3) *3 = I  THEN  PRINT 
9430  HTAB (12 +3 *(I - INT(I/3) *3)):X% =  PEEK(A +I): GOSUB 9100: NEXT 
9440  IF P -A < = 3  THEN  GOSUB 9500
9450  RETURN 
9500  PRINT  TAB( 22);A$;: RETURN 
9600 D1% = S1%:D2% = S2%:D3% = S3%:D4% = S4%: RETURN 
9700  RETURN 
9800  RETURN 
9900  IF P% = 1  OR   NOT TF%  THEN  RETURN 
9910  IF TC% < >0  THEN  GOSUB 10000
9920  RETURN 
10000  GOSUB 3600: PRINT "TST_FAIL": STOP 
10010  RETURN 
10100  IF SC% = 0  THEN 10120
10110  PRINT : FOR I = 0 TO SC% -1: PRINT SN$(I);"= ";:Q = SV(I): GOSUB 10200: PRINT " (";SV(I);")": NEXT 
10120  PRINT : PRINT P -31488;" BYTE(S)": PRINT EC%;" ERROR(S)": RETURN 
10200 X% = Q/256: GOSUB 9100:X% = Q -(X% *256): GOSUB 9100: RETURN 
10300 K = I +1
10310  IF K >A%  THEN  RETURN 
10320  IF  MID$ (A$,K,1) = T$  THEN  RETURN 
10330 K = K +1: GOTO 10310
10400  DIM OM$(OC%): DIM OL%(OC%): DIM OP%(OC%): RESTORE :M = 0: FOR I = 0 TO OC%: READ OM$(I): GOSUB 2700: READ T%: IF T% = 0  THEN OL%(I) = M:M = M +1: GOTO 10420
10410 OL%(I) = D2% *256 +D1%:OP%(I) = D4% *256 +D3%: GOSUB 2500
10420  NEXT : READ T$: RETURN 
32000  DATA "; REMOVE LEADING SPACES FROM DATA STATEMENTS IN"
32001  DATA "; APPLESOFT PROGRAM CURRENTLY LOADED INTO RAM."
32100  DATA "ENDLO   EQU $69 ; END OF BASIC PROGRAM POINTER"
32110  DATA "ENDHI   EQU $6A"
32120  DATA "DATA    EQU $83 ; DATA TOKEN"
32130  DATA "SPACE   EQU $20 ; SPACE CHARACTER"
33000  DATA ";"
33010  DATA "; ENTRY POINT"
33020  DATA "        ; INIT LINE READER POINTER"
33030  DATA "LOOP    LDA LINKLO"
33040  DATA "        STA RDLO"
33050  DATA "        LDA LINKHI"
33060  DATA "        STA RDHI"
33070  DATA "        ; DONE IF 16-BIT LINK WAS NULL"
33080  DATA "        ORA LINKLO"
33090  DATA "        BNE CONT"
33100  DATA "        RTS"
33110  DATA "CONT    ; SKIP LINK AND LINE#"
33120  DATA "        LDX #4"
33130  DATA "SKIP    JSR RDNEXT"
33140  DATA "        DEX"
33150  DATA "        BNE SKIP"
33160  DATA "        ; IS DATA TOKEN?"
33170  DATA "        CMP #DATA"
33180  DATA "        BNE ADV"
33190  DATA "        ; HAS LEADING SPACE TO REMOVE"
33200  DATA "        JSR RDNEXT"
33210  DATA "        CMP #SPACE"
33220  DATA "        BNE ADV"
33230  DATA "        ; RECORD MOVE DEST ADDRESS
33240  DATA "        LDA RDLO"
33250  DATA "        STA DESTLO"
33260  DATA "        LDA RDHI"
33270  DATA "        STA DESTHI"
33280  DATA "        ; FIND NON-SPACE BYTE AND COUNT SPACES"
33290  DATA "        LDA #0"
33300  DATA "        STA LINECNT"
33310  DATA "NXTBYTE ;INCREMENT LINE REMOVED BYTE COUNT"
33320  DATA "        INC LINECNT"
33330  DATA "        ;INCREMENT TOTAL REMOVED BYTE COUNT"
33340  DATA "        INC TOTLO"
33350  DATA "        BNE NCARRY1"
33360  DATA "        INC TOTHI"
33370  DATA "NCARRY1 JSR RDNEXT"
33380  DATA "        CMP #SPACE"
33390  DATA "        BEQ NXTBYTE"
33420  DATA "        ; RECORD MOVE SRC ADDRESS"
33430  DATA "        LDA RDLO"
33440  DATA "        STA SRCLO"
33450  DATA "        LDA RDHI"
33460  DATA "        STA SRCHI"
33470  DATA "MVBYTE  ; MOVE BYTES DOWN IN RAM TO REMOVE SPACES"
33480  DATA "        DB $AD ; LDA XXXX (OPCODE)"
33490  DATA "SRCLO   DB $00 ;  LOBYTE OF ADDRESS"
33500  DATA "SRCHI   DB $00 ;  HIBYTE OF ADDRESS"
33510  DATA "        DB $8D ; STA XXXX (OPCODE)"
33520  DATA "DESTLO  DB $00 ;  LOBYTE OF ADDRESS"
33530  DATA "DESTHI  DB $00 ;  HIBYTE OF ADDRESS"
33540  DATA "        ; INCREMENT SRC/DEST POINTERS"
33550  DATA "        INC SRCLO"
33560  DATA "        BNE NCARRY2"
33570  DATA "        INC SRCHI"
33580  DATA "NCARRY2 INC DESTLO"
33590  DATA "        BNE NCARRY3"
33600  DATA "        INC DESTHI"
33610  DATA "NCARRY3 ; HIT END OF CODE?"
33620  DATA "        LDA SRCLO"
33630  DATA "        CMP ENDLO"
33640  DATA "        BNE MVBYTE"
33650  DATA "        LDA SRCHI"
33660  DATA "        CMP ENDHI"
33670  DATA "        BNE MVBYTE"
33680  DATA "        ; GET HERE WHEN MOVE COMPLETED"
33690  DATA "        ; NOW UPDATE END OF CODE POINTER"
33700  DATA "        SEC"
33710  DATA "        LDA ENDLO"
33720  DATA "        SBC LINECNT"
33730  DATA "        STA ENDLO"
33740  DATA "        BCS ADV"
33750  DATA "        DEC ENDHI"
33760  DATA "ADV     ; PREPARE TO UPDATE LINK ADDRESS IN RAM"
33762  DATA "        LDA LINKLO"
33763  DATA "        STA WRLO"
33764  DATA "        LDA LINKHI"
33765  DATA "        STA WRHI"
33769  DATA "        ;ADVANCE LINK TO NEXT OLD ADDRESS"
33770  DATA "        JSR GETLINK"
33780  DATA "        TAX"
33790  DATA "        JSR GETLINK"
33800  DATA "        STA LINKHI"
33810  DATA "        STX LINKLO"
33811  DATA "        ;EXIT IF LINK WAS NULL"
33812  DATA "        ORA LINKLO"
33813  DATA "        BNE CONT2"
33814  DATA "        RTS"
33820  DATA "CONT2   ; CORRECT LINK DUE TO MOVEMENT"
33830  DATA "        SEC"
33840  DATA "        LDA LINKLO"
33850  DATA "        SBC TOTLO"
33860  DATA "        STA LINKLO"
33865  DATA "        TAX"
33870  DATA "        LDA LINKHI"
33880  DATA "        SBC TOTHI"
33890  DATA "        STA LINKHI"
33891  DATA "        TAY"
33892  DATA "        ; WRITE OUT CORRECTED LINK ADDRESS"
33893  DATA "        TXA"
33894  DATA "        JSR WRLINK"
33895  DATA "        TYA"
33896  DATA "        JSR WRLINK"
33900  DATA "        ; PROCESS NEXT LINE"
33910  DATA "        JMP LOOP"
35000  DATA ";"
35010  DATA ";"
35020  DATA "; GET NEXT BYTE FROM LINE"
35030  DATA "; RETURN WITH NEXT BYTE IN A"
35040  DATA "RDNEXT  INC RDLO ; PRE-INCREMENT ADDRESS"
35050  DATA "        BNE NCARRY4"
35060  DATA "        INC RDHI"
35070  DATA "NCARRY4 DB $AD ; LDA XXXX (OPCODE)"
35080  DATA "RDLO    DB $00 ;  LOBYTE OF ADDRESS"
35090  DATA "RDHI    DB $00 ;  HIBYTE OF ADDRESS"
35100  DATA "        RTS"
36000  DATA ";"
36010  DATA "; LOAD A WITH BYTE IN 16-BIT LINK FIELD"
36020  DATA "GETLINK DB $AD ; LDA XXXX (OPCODE)"
36030  DATA "LINKLO  DB $01 ;  LOBYTE OF ADDRESS"
36040  DATA "LINKHI  DB $08 ;  HIBYTE OF ADDRESS"
36050  DATA "        INC LINKLO ; POST-INCREMENT ADDRESS"
36060  DATA "        BNE NCARRY5"
36070  DATA "        INC LINKHI"
36080  DATA "NCARRY5 RTS"
36500  DATA ";"
36510  DATA "; WRITE A VALUE TO 16-BIT LINK FIELD"
36520  DATA "WRLINK  DB $8D ; STA XXXX (OPCODE)"
36530  DATA "WRLO    DB $00 ;  LOBYTE OF ADDRESS"
36540  DATA "WRHI    DB $00 ;  HIBYTE OF ADDRESS"
36550  DATA "        INC WRLO ; POST-INCREMENT ADDRESS"
36560  DATA "        BNE NCARRY6"
36570  DATA "        INC WRHI"
36580  DATA "NCARRY6 RTS"
37000  DATA ";"
37010  DATA ";"
37020  DATA "LINECNT DB 0 ; REMOVE BYTE COUNT FOR CURR LINE"
37030  DATA "TOTLO   DB 0 ; TOTAL REMOVE BYTE COUNT"
37040  DATA "TOTHI   DB 0"
63998  DATA "        SAV DSPACE.BIN"
63999  DATA  " END"